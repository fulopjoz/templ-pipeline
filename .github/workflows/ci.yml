name: CI

on:
  push:
    branches: [ master, dev ]
  pull_request:
    branches: [ master ]

env:
  PYTHONUNBUFFERED: 1

jobs:
  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
      fail-fast: false  # Don't cancel other jobs when one fails

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run tests with coverage
      run: |
        pytest --cov=templ_pipeline --cov-report=xml --cov-report=term-missing --junitxml=test-results.xml
      continue-on-error: false
    
    - name: Ensure test results exist
      run: |
        # Create test results file if it doesn't exist (e.g., if no tests were run)
        if [ ! -f test-results.xml ]; then
          echo "Creating empty test results file"
          cat > test-results.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <testsuites>
            <testsuite name="pytest" errors="0" failures="0" skipped="0" tests="0" time="0.0">
            </testsuite>
          </testsuites>
          EOF
        fi
        
        # Create coverage file if it doesn't exist
        if [ ! -f coverage.xml ]; then
          echo "Creating empty coverage file"
          cat > coverage.xml << 'EOF'
          <?xml version="1.0" ?>
          <coverage version="6.3.2" timestamp="$(date +%s)" lines-valid="0" lines-covered="0" line-rate="0.0" branches-covered="0" branches-valid="0" branch-rate="0.0" complexity="0.0">
            <sources>
              <source>.</source>
            </sources>
            <packages>
            </packages>
          </coverage>
          EOF
        fi
      continue-on-error: true
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports-${{ matrix.python-version }}
        path: coverage.xml
        retention-days: 7
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: test-results.xml
        retention-days: 7

  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/dev')
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download coverage artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: coverage-reports-*
        path: ./
    
    - name: Merge coverage reports
      run: |
        # Find all coverage.xml files and merge them using coverage.py
        python -m pip install coverage
        
        # Check if any coverage files exist
        if ls coverage-reports-*/coverage.xml 1> /dev/null 2>&1; then
          echo "Found coverage files, merging..."
          coverage combine coverage-reports-*/coverage.xml
          coverage xml -o merged-coverage.xml
        else
          echo "No coverage files found, creating empty coverage report"
          # Create a minimal coverage.xml file
          cat > merged-coverage.xml << 'EOF'
          <?xml version="1.0" ?>
          <coverage version="6.3.2" timestamp="$(date +%s)" lines-valid="0" lines-covered="0" line-rate="0.0" branches-covered="0" branches-valid="0" branch-rate="0.0" complexity="0.0">
            <sources>
              <source>.</source>
            </sources>
            <packages>
            </packages>
          </coverage>
          EOF
        fi
    
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  lint:
    name: Lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
      fail-fast: false  # Don't cancel other jobs when one fails

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-lint-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run black
      run: |
        black --check --diff templ_pipeline/ tests/ scripts/ || true  # Don't fail on formatting
    
    - name: Run isort
      run: |
        isort --check-only --diff templ_pipeline/ tests/ scripts/ || true  # Don't fail on imports
    
    - name: Run flake8
      run: |
        flake8 templ_pipeline/ tests/ scripts/ --max-line-length=88 --ignore=E203,W503
    
    - name: Run mypy
      run: |
        mypy templ_pipeline/ || true  # Don't fail on type checking

  security:
    name: Security Check
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
      fail-fast: false  # Don't cancel other jobs when one fails

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-security-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install bandit safety
    
    - name: Run bandit security check
      run: |
        bandit -r templ_pipeline/ -f json -o bandit-report.json || true
    
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Ensure security reports exist
      run: |
        # Create bandit report if it doesn't exist
        if [ ! -f bandit-report.json ]; then
          echo "Creating empty bandit report"
          echo '{"results": [], "errors": [], "generated_at": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > bandit-report.json
        fi
        
        # Create safety report if it doesn't exist
        if [ ! -f safety-report.json ]; then
          echo "Creating empty safety report"
          echo '{"report": [], "generated_at": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > safety-report.json
        fi
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports-${{ matrix.python-version }}
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30
