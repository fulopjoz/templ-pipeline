TEMPL: A template-based protein ligand pose prediction baseline
J. Fülöp[1], M. Šícho[1], W. Dehaen[1][2] 
[1] Department of Informatics and Chemistry, Faculty of Chemical Technology, University of Chemistry and Technology Prague, Technická 5, 16 628 Prague 6, Czech Republic;
[2] Department of Organic Chemistry, Faculty of Chemical Technology, University of Chemistry and Technology Prague, Technická 5, 16 628 Prague 6, Czech Republic;
Abstract:
Pose prediction of ligands to proteins remains a central challenge of structure based drug design. Data-driven methods for pose prediction now routinely outperform traditional techniques such as molecular docking, although data leakage and generalizability concerns remain. We propose a simple ligand based baseline for pose prediction which is based on maximal common substructure (MCS) to reference molecules and constrained embedding. As this TEMplate-based Protein Ligand (TEMPL) baseline is strictly data-driven, it can give an idea of how “easy” or “extrapolable” a target really is. We applied our baseline method in the Polaris pose prediction benchmark challenge, achieving a result that outperformed some classic docking algorithms. Furthermore, we show the performance of our baseline is [relatively good] when using common data sets used for deep learning based pose prediction, highlighting the risk of data leakage and necessity of challenging splits. 

Introduction:
The prediction of the pose (i.e. conformation and absolute placement) of an unseen ligand to a protein is one of the grand challenges of structure-based drug design. The prediction of the correct pose allows rational design of analogs as well as providing the starting point for any follow-up molecular modelling such as molecular dynamics or free energy of binding estimation. The traditional method used for this purpose is molecular docking, which is widely used and has achieved many successes as an important component of drug design campaign [cite], but which also has several well known serious limitations. Molecular docking is based on the combination of a scoring function which ranks a given pose and a search method, which is used to optimize starting poses into the lowest possible score.
Recently, several new methods for pose prediction that are distinct from classic molecular docking were developed, which can be broadly divided into two main categories: deep learning based pose prediction and cofolding. In deep learning based pose prediction, large protein-ligand complex structure datasets are leveraged to predict ligand poses using geometric deep learning. Some notable methods are Equibind, which is based on E(3) (sp?) equivariant GDL, and DiffDock, a diffusion based approach. Conversely, in cofolding, protein structure prediction and ligand placement are done concurrently. The best known example of the cofolding approach is AlphaFold3 as well as its derivatives such as Chai Boltz Protenix etc as well as RosettaFold AllAtom (and whatever else i’m forgetting). These methods have all achieved superior performance in pose prediction success on common benchmarks.
A typical problem of machine learning approaches is limited extrapolation abilities. Analysis showed that the good reported performance of deep learning based pose prediction and cofolding can be partially attributed to similarities between training and test sets. For example, when using the commonly utilized time split approach on the PDBbind set[cite], the test set contains identical and very similar proteins and ligands. These issues as well as ways to deal with them have been discussed at length [cite these discussions here like diffodck l and PW paper]. Additionally, diffusion based ligand placement methods suffer from some unusual issues, such as alteration of the ligand (e.g. inversion of stereocenters, change of bond orders), which physics inspired methods such as docking suffer from less.
Recently, cofolding methods achieved a first serious success in a prospective challenge: the Polaris challenge. The Polaris pose prediction challenge involved the prediction of the structure of circa 200 protein ligand complexes of inhibitors bound to the SARS-CoV-2 and MERS-CoV Main Protease. As these true poses were only made available after the challenge concluded, this can be considered an honest benchmark challenge to compare pose prediction methods. In this challenge, cofolding methods performed all other methods, particularly traditional pose prediction methods such as FRED, GLIDE and Vina, confirming the reported good performance of these methods cannot solely be attributed to data leakage and similarity.

This success can be partially attributed to the fact a wealth of data exists for the SARS-SoV-2 Main Protease, which is a widely targeted protein, and which is the target of Nirmaltrevir (sp?), Pfizer’s FDA-approved SARS-CoV-2 Protease inhibitor which is clinically used to treat COVID-19 infections. This meant known ligands could be used as a sort of template or reference to predict the pose of new ligands, with the assumption common parts of different binders will more or less bind in the same location. This same principle is also applied in template-based docking, which is used in [OpenEye, Glide, etc]

To further investigate the power of the template effect, we designed a baseline method which is based completely on ligand alignment. The procedure is based on first finding the best template using Maximal Common Substructure (MCS), then generating conformations based on the template, using constrained embedding, and then finally ranking conformation by 3D alignment with the template. This workflow is described in FigXX.


FigXX. 
Workflow of TEMPL. A. Alignment of the input protein to a set of reference protein ligand complexes can be used to generated the reference ligands to be used as templates. B. Template based, ligand-only strategy for placement prediction.
Methods:
The core methods of TEMPL are all internal functions of the RDKit, a cheminformatics library (insert doi to the version we used). The procedure used in TEMPL is based on detection of the Maximal Common Substructure (MCS) between the ligand and a set of reference ligands. Then, the best MCS match is used for constrained embedding, generating conformers where the matching atoms from the MCS are locked in the reference coordinates. Then, the generated conformers are ranked using shape or feature alignment to the reference molecule.
MCS detection was performed using the RascalMCES algorithm. This method was preferred over the standard MCS method in RDKit (rdMCFS)sp? because of its higher speed, which is an important bottleneck when there is a high amount of probe and reference ligands. [describe rascalMCES and link to the related paper here].
Constrained embedding was performed using the ETKDGv3 method[cite], which is a commonly used method for conformer generation [link to a few papers where they say its the best]. These generated conformers were optimized using the MMFF94x[spellcheck] forcefield, keeping the MCS match atoms locked in place.
Finally, ranking of the conformers resulting from constrained embedding was done using RDKit’s Align3D method. This recently added method is based on the Gaussian volume approximation of molecular shape which allows fast calculation of overlap. This overlap is quantified using Shape and ColorTanimoto, which corresponds to the intersection of the (colored or not) volumes divided by the union of the volumes.
For the PDBbind experiments, significant data cleaning was performed on the PDBBind data set. To ensure correct parsing of molecules, which are provided as SDF files, the corresponding ligand SMILES were retrieved [link to the paper from which you got those SMILES or the repo in case there is no paper] and used to reconstruct and correct the atom connectivity, which is essential for correct detection of MCS. Nonetheless, X molecules were rejected due to problems with parsing.
The sequences of PDBbind protein chains were embedded using ESM2 embeddings (x,y, and z model) using the [insert used method here] approach, averaging the per residue embeddings into a single 1280 float embedding vector. The distance between different sequences were quantified using the cosine distance. In the case of some longer sequences, it is possible to reduce high GPU memory demands using chunking, the effect of which is shown in SI fig X. To increase portability of our method, we have also made the used embedding available via [insert Zenodo link here].
For protein backbone superposition, we applied the superpose_homologous(sp?) method from the biotite package (sp?).
[Info about how we built and deployed the streamlit app]
For calculation of ligand RMSDs, the sPyRMSD Python package was used. This method is symmetry-corrected and is also independent of hydrogens and bond orders, which enables some tautomer and protomer related non-identity issues to be averted. [insert RMSD formula here]. Generally, an RMSD of 2 Angstrom and below has been considered a docking success [cite] although this threshold is considered crude and a truly successful docking prediction will also involve other factors such as physical soundness, retrieval of molecular interactions and realistic torsion angles.[cite]
Results:
Polaris pose prediction challenge
A prototype version of our method was applied in the Polaris pose prediction challenge. This challenge involved predicting the pose of a series of circa 200 closely related ligands to the SARS-CoV-2 and MERS-CoV Main Protease. A training set of about 800 complexes to SARS-CoV-2 Main protease was made available as a part of the challenge. Our method achieved a success rate of 50%[factcheck this number] on the intermediary leaderboard. On the final leaderboard, the performance of the baseline deteriorated to 28%[factcheck this number] due different settings. Below, we report the results for the finalized version of TEMPL. The final maximally achieved performance is xx%. [This is higher than the best achieved performance of xx% on the leaderboard, but during this optimization change the test set results were available, making it easier to confidently pick out the most performant set of settings.]

Table X showing “ablation study” results for:
No MCS and just ShapeTanimoto
No MCS and just ColorTanimoto
No MCS and just ComboTanimoto
MCS + embedding 1 conformers
MCS + embedding 5 conformers
MCS + embedding 10 conformers
MCS + embedding 50 conformers
MCS + embedding 100 conformers
MCS + embedding x conformers + rerank with alignment (shape)
MCS + embedding x conformers + rerank with alignment (color)
MCS + embedding x conformers + rerank with alignment (combo)
MCS + embedding x conformers + rerank with alignment (shape) + rotate/translate with align3d
MCS + embedding x conformers + rerank with alignment (color) + rotate/translate with align3d
MCS + embedding x conformers + rerank with alignment (combo) + rotate/translate with align3d
(report numbers for “train set” with 800 mols as well as test set with 200 mols)
(MCS leniency probably should be investigated too)
PDBbind pose prediction
To compare our baseline head to head with recent pose prediction methods, we employed the PDBbind data set, using commonly used splits, in particular the time split used by Stark and coworkers [cite diffdock and equibind]. The PDBbind data set is a curated subset of the Protein Data Bank (PDB) with protein-ligand complexes, which consists of XX,XXX unique structures. This split was later criticized for test-train similarities, both on the ligand and protein level, making the pose prediction task easier than anticipated and possibly inflating the performance of data driven pose prediction methods. Because our baseline is designed to capture such effects, we anticipated this is one place where our baseline method should show good performance due to near-neighbor behavior.

Using these provided splits, which is based on a cutoff at a given data (1st of january 2020), TEMPL achieves an RMSD success rate of xx%, comparable with the reported success rate of Vina and GLIDE at yy% and xx%. DiffDock itself achieved a success rate of vv%. In FigX, the success rate dependency on training set similarity is shown both for ligand and protein similarity. As expected, particularly in the situation of high ligand similarity combined with high protein similarity, high success rates (ww%) are achieved. 

Optimization of k, the amount of nearest neighbor proteins from the reference set (the PDBbind training fold) was investigated. Table X shows that k=xxx is the optimum balance between completeness and performance.

Figure X: heatmap with on one axis: input ligand tanimoto to nearest neighbor in reference set, on other axis: input protein sequence ESM cosine distance to nearest neighbor in reference set and RMSD < 2 success % in each bin. CAn possibly put a ligand only and protein only similarity curve on the axes, depending on how good that looks

Table X: reported total RMSD < 2 success in function of K in the KNN targets
Plinder pose prediction
An extended response to limitations of the PDBbind set was made in the form of PLINDER[cite]. This dataset provides a large amount of cleaned up protein ligand data (1XX,XXX unique complexes) as well as recommendation on rigid splits taking into account similarities of ligands and proteins. Using the provided splits [...]. This experiment followed a similar trend, showing good performance in the similar protein and ligand region and having rapid deterioration outside of it.
FigX: same heatmap as PDBbind one? Might be shown side by side or put into the SI
Posebusters pose prediction and pose evaluation

One of the first serious challenges to the reported good performance of deep learning based pose placement method was made by the PoseBusters team, which showed these methods suffer from serious problems including physically improbable conformations and steric clashes. The PoseBusters authors also provided a more challenging protein ligand complex data set which was later used as a benchmark set for cofolding methods such as alphafold3, chai, protenix, boltz1, etc. Using the same workflow, TEMPL achieved a success rate of xx%, comparable with the reported success rate of yy% of Vina, and lower than the success rate of xx% reported for AlphaFold3.

Additionally, we used PoseBusters to estimate the PoseBusters validity of poses obtained using TEMPL. As TEMPL is based on MCS alignment and is strictly ligand-based, there is no awareness at all of possible steric clashes, and the aim is solely to obtain poses that perform well on the RMSD based metric. As expected, xx% of the obtained poses were PoseBusters invalid, mainly due to steric clashes. This is comparable with the yy% obtained for DiffDock, but significantly higher than the low invalidity reported for AF3.
Discussion:
The pose prediction experiments described in the results section of this paper confirm the initial observation from our submission to the Polaris pose prediction challenge. When similar protein-ligand complexes are available, pose prediction based on similarity achieves high success rates. As described elsewhere [cite DiffDock L paper and Walters critique] the same effect leads to overestimation of the strength of cofolding and deep learning based pose prediction methods. 
The Polaris challenge itself corresponded to a “best-case scenario” for similarity based methods: a large amount of Protein-Ligand complex structures were available for SARS-CoV-2 Main Protease and the ligand in the test set mostly belonged to one series of similar compounds contain a decorated isoquinoline. In this case, our method performed well and outperformed traditional methods, including AutoDock Vina with template placement correction. On the other hand, cofolding methods performed significantly better, occupying the entire top 5 in the final leaderboard.
Applying this method on widely used pose prediction benchmarks confirmed a strong dependency on similarity and achieved [mediocre/good/average] performance, comparable with [insert vina or glide here]. As shown in FigX, on novel proteins and/or using novel ligands, the performance completely collapses, confirming this approach is, unlike traditional docking methods[cite], not able to extrapolate meaningfully at all.
[Add here whatever further surprising stuff we find during the actual analysis]
Conclusion:
We have constructed a baseline method which leverages knowledge from known protein ligand complexes to predict the poses of new ligands to new proteins. We show this baseline achieves relatively strong performance at pose prediction, sometimes outperforming widely used traditional pose prediction methods such as AutoDock Vina. Although our baseline was not among the highest ranked in the final Polaris challenge leaderboard, it did outperform many advanced pose prediction techniques. We propose our baseline to be used as a realistic minimal baseline that needs to be outperformed by newly proposed pose prediction methods, particularly under conditions where highly similar protein or ligand information can be leveraged. Our method is available both as open-source code as well as through a web app, accessible at www.link.com[change this to correct link]. 
Acknowledgement
J.F., M.S. and W.D. were supported by the Ministry of Education, Youth and Sports of the Czech Republic – National Infrastructure for Chemical Biology (CZ-OPENSCREEN, LM2023052). W.D. was supported by the Ministry of Education, Youth and Sports of the Czech Republic by the project “New Technologies for Translational Research in Pharmaceutical Sciences/NETPHARM”, project ID CZ.02.01.01/00/22_008/0004607, cofunded by the European Union. 
Supplementary materials
SI.docx (should contain some of the plots from ESM like the TSNE and maybe the chunking info and whatever else is irrelevant to the main line of the paper or whatever doesnt fit in the space constraints)
Code and data availability
Link to github and to streamlit metacentre app. Link to Zenodo (or figshare, whatever) with checkpoint and with used ESM embeddings.
References
Will be added by me later. Just add DOIs inline for now

