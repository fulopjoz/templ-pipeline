# SPDX-FileCopyrightText: 2025 TEMPL Team
# SPDX-License-Identifier: MIT
[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "templ-pipeline"
version = "1.0.0"
description = "TEMPL (Template-based Protein Ligand) pose prediction pipeline"
authors = [
    {name = "TEMPL Team", email = "author@example.com"},
]
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
platforms = ["Linux", "macOS", "Windows"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
    "Topic :: Scientific/Engineering :: Chemistry",
]

# Cross-platform compatibility configuration
[tool.setuptools.platforms]
wheel = ["any"]

# Core dependencies - essential for all installations
dependencies = [
    "numpy>=1.20.0",
    "pandas>=1.3.0", 
    "scikit-learn>=1.0.0",
    "rdkit==2024.09.6",
    "biopython>=1.79",
    "biotite>=0.34.0",
    "spyrmsd>=0.8.0",
    "tqdm>=4.62.0",
    "rich>=12.0.0",
    "colorama>=0.4.4",
    "pebble>=4.6.0",
    "psutil>=5.8.0",
    "tabulate>=0.8.0",
    "zenodo-get>=1.6.0",
]

[project.optional-dependencies]
# Basic CLI enhancements (progress bars, colored output)
basic = [
    "tqdm>=4.62.0",
    "rich>=12.0.0",
    "colorama>=0.4.4",
]

# Web interface (includes basic enhancements)
web = [
    "templ-pipeline[basic]",
    "streamlit>=1.45.0",
]

# Performance optimizations (system monitoring, parallel processing)
performance = [
    "psutil>=5.8.0",
    "pebble>=4.6.0",
]

# Embedding/AI features (protein language models)
embeddings = [
    "transformers>=4.10.0",
    "torch>=2.0.0",  # Auto-detects CUDA
    "sentence-transformers>=2.0.0",
]

# Full installation (all optional features)
full = [
    "templ-pipeline[basic,performance,embeddings]",
    "streamlit>=1.45.0",
]

# Development (contributors only)
dev = [
    "templ-pipeline[full]",
    "pytest>=7.0.0",
    "pytest-cov>=3.0.0",
    "pytest-asyncio>=1.0.0",
    "pytest-xdist>=3.0.0",
    "pytest-timeout>=2.0.0",
    "pytest-repeat>=0.9.0",
    "pytest-benchmark>=4.0.0",
    "pytest-html>=3.0.0",
    "pytest-json-report>=1.5.0",
    "pytest-memray>=1.0.0",
    "black>=22.0.0",
    "isort>=5.0.0",
    "flake8>=4.0.0",
    "mypy>=0.950",
]

[project.scripts]
templ = "templ_pipeline.cli.main:main"

[project.entry-points."console_scripts"]
templ = "templ_pipeline.cli.main:main"
templ-pipeline = "templ_pipeline.cli.main:main"

[project.urls]
"Homepage" = "https://github.com/fulopjoz/templ-pipeline"
"Bug Reports" = "https://github.com/fulopjoz/templ-pipeline/issues"
"Source" = "https://github.com/fulopjoz/templ-pipeline"

[tool.setuptools.packages.find]
where = ["."]
include = ["templ_pipeline*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
templ_pipeline = ["data/**/*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
filterwarnings = [
    "ignore::DeprecationWarning:biotite.*",
    "ignore::pytest.PytestConfigWarning",
    "ignore::pytest.PytestUnhandledThreadExceptionWarning",
]
markers = [
    "fast: marks tests as fast running (< 10s)",
    "medium: marks tests as medium running (< 30s)", 
    "slow: marks tests as slow running (> 30s)",
    "integration: marks tests as integration tests",
    "ui: marks tests as UI/Streamlit tests",
    "performance: marks tests as performance-related",
    "flaky: marks tests as flaky (may need retries)",
    "critical: marks tests as critical path tests",
    "isolation: marks tests requiring isolation verification",
    "coverage_critical: marks tests as critical for coverage analysis",
    "performance_critical: marks tests as critical performance tests",
    "asyncio: marks tests requiring asyncio support",
]

# Enhanced test discovery and configuration
opts = [
    "--strict-markers",
    "--doctest-modules",
    "--ignore=setup.py",
    "--ignore-glob=**/test_resources/*",
    "--import-mode=importlib",
]

# Configure timeouts and other runtime parameters
timeout_func_name = "test_timeout"
timeout_method = 120  # 2 minutes default timeout

# Performance and coverage configuration
addopts = [
    f"--timeout={timeout_method}",
    "-p", "no:faulthandler",
    "--show-capture=no",
]

[tool.deptry]
per_rule_ignores = { DEP003 = ["templ_pipeline"], DEP004 = ["matplotlib", "umap"] }

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["templ_pipeline"]
known_third_party = ["pytest", "numpy", "pandas", "rdkit", "streamlit"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

[tool.flake8]
max-line-length = 88
extend-ignore = [
    "E203",  # whitespace before ':' (conflicts with black)
    "W503",  # line break before binary operator (conflicts with black) 
    "E265",  # block comment should start with '# ' (false positive on shebangs)
]
exclude = [
    ".git",
    ".templ",
    ".venv",
    "venv",
    "env",
    "build",
    "dist",
    "*.egg-info",
]
per-file-ignores = [
    "tests/*:F401,F841",  # Allow unused imports and variables in tests
    "scripts/*:E402",     # Allow module imports not at top in scripts
]
